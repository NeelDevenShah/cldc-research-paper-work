***(1) DeepBot: a time-based botnet detection with deep learning***

In this paper,
we introduce a method to detect potential botnets by inspecting the behaviors of network traffics from network packets. In
the beginning, we sample the given packets by a period of time and extract the behavioral features from a series of packets.
By analyzing these features with proposed deep learning models, we can detect the threat of botnets and classify them into
different categories

rnn and lstm

Consequently, we choose
to apply RNN and LSTM on time-based analysis to detect
potential botnets in this paper.

In the first step, net-
work traffic is recorded and stored into pcap format. In step
two, we extract features from the input network traffics we
get from step one. Then, in step three, we use three different
methods to train our model during training. After the model
is built, we can input test data to the model and get the clas-
sification result.

rain our model with datasets from malware
capture facility project (MCFP)

Among different kinds of botnet families, we select four
kinds of botnet: Dridex, Emotet, Sality and Zbot, due to the
fact that their datasets are larger, plus these families have
caused huge impacts for several years.

PyShark is a powerful tool for network packet analysis. It
is a Python wrapper of tshark https://www.wireshark.org/
docs/man-pages/tshark.html, which is a lightweight library
in comparison with other libraries like scapy or pypcapfile
since it simply leverages functionalities in tshark.

The experiment is run on Windows 10 enterprise with
hardware settings as follows: Intel i5-8400K @ 4GHz CPU,
32-GB RAM, Geforce GTX 1070Ti.

we do data scaling by standardizing the input.
Without standardization or normalization, the training pro-
cess will become slow and unstable, which may result in
convergence failure.

Then, we feed the training data into three different models:
LSTM, RNN and combinational model.
During training process, each hidden layer is followed by a
dropout layer. The purpose of dropout is to randomly discard
some of the output to avoid overfitting and accelerate the
training process.

--------------------------------------------------------

***(2) AUTOMATING B OTNET D ETECTION WITH G RAPH N EURAL N ETWORKS***

In this work, we propose to tailor graph neural networks
(GNN) to identify botnets within massive background Inter-
net communication graphs by automatically identifying their

topological features (i.e., communication patterns). GNNs
are well-suited for the botnet detection problem given the
large graphs of complex topological structures. In each layer
of a GNN, nodes update their states and exchange informa-
tion by passing messages to their neighboring nodes. Thus,
the model can automatically identify node dependencies in
the graph after many layers of message passing. There is
no need for explicit filters, explicit feature definitions, or
manual tuning.

We specifically design GNNs for the problem of botnet
detection that can automatically capture the hierarchical
structure of centralized botnets and the fast-mixing structure
for decentralized botnets.

Our datasets for GNN detection are communication net-
work graphs of a large scale compared to many graph
benchmark datasets. To be specific, one single graph in
our datasets contains over 140k nodes and 700k edges,
for which we find deeper models are needed to detect
some of the topological properties.

We formulate this problem
as a binary node classification problem on graphs and intro-
duce datasets for botnet detection to facilitate model training
and testing later.

--------------------------------------------------------

***(3) DBD: Deep Learning DGA-Based Botnet Detection***

propose a novel deep learning framework to detect
malicious domains generated by malicious Domain Generation Algorithms (DGA).
The proposed DGA detection method, named, Deep Bot Detect (DBD) is able to
evaluate data from large scale networks without reverse engineering or performing
Non-Existent Domain (NXDomain) inspection.

we propose a scalable deep learning DGA-based botnet iden-
tification framework, named, DBD, which uses a Convolutional Neural Network
with a Long Short Term Memory (CNN-LSTM) pipeline to detect DGA domain names
--------------------------------------------------------

***(4) BoTShark: A Deep Learning Approach for Botnet Traffic Detection***

We propose BoTShark with two deep structures namely BoTShark-SA that applies
stacked Autoencoders to extract new features for distinguishing malicious and
benign network flows and BoTShark-CNN which takes the advantage of CNNs to
train a classifier for detecting malicious traffics.

An Autoencoder is similar to a neural network where the output is regarded as
the input and supposes that the hidden layer must reconstruct the initial information
with the least possible amount of distortion. Then, Autoencoders are trained to
reconstruct their own inputs X instead of being trained to predict Y . An Autoencoder
tries to learn a function h(W,b) (x) ∼
= x by learning an approximation to the identity
function

an Autoencoder always consists of two parts, the encoder
and the decoder, which can be a transition between φ and ρ such that φ : X → F
and ρ : F → X where F is the intermediate representation of sample X

And also in the autoencoders we use the softmax activation function

A CNN consists of different layers that each layer performs a different function
on their inputs. Convolution layer, pooling layer and non-linear layer are three layers
that are very common in the literature and are usually stacked sequentially many
times based on the application

The convolutional layer contains a filter as a sliding window to generate new
feature maps. In other words, each filter will generate a new feature set and the
model applies different filters to the inputs. The pooling layer uses a kind of filter
to summarize the generated feature maps during the previous layer. As convolution
explores the correlation between different features, the pooling layer extracts the
existing correlation in any parts of the input. There are a few functions namely max
pooling, L2-Norm pooling and average pooling that can be used in pooling layer.
Since the operations in the layers of convolution and pooling are linear, a no
remaining
--------------------------------------------------------

***(5) VARMAN: Multi-plane security framework for software defined networks***

They used stacked auto encoders and random forest classifier

It integrates and coordinates multiple stages
of attack detection including feature selection and flow classification,
anomaly detection to detect novel intrusions with a self-learning ability.

--------------------------------------------------------

***(6) Machine Learning-Based IoT-Botnet Attack Detection with Sequential Architecture***

neural network (ANN), J48 decision tree, and Naïve Bayes.

A botnet attacks detection framework with sequential architecture based on machine learning
(ML) algorithms
--------------------------------------------------------

***(7) Mobile Botnet Detection: A Deep Learning Approach Using Convolutional Neural Networks***


CNN-based model

The performance does not improve until we
reach 32 filters. It then drops again when we increase this to
64. Based on these results we select 32 filters as the optimal
configuration parameter for the model’s number of filters.
Notice the increase in the number of training parameters as the
number of filters is increased, and for 32 filters, the training of
25,625 parameters is required. With 32 filters we obtain a
classification accuracy of 98.9% compared to 98.6% that is
obtained with 4 filters
